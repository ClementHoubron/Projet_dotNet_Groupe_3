// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Projet.Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompteBancaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOuverture")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroCompte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ComptesBancaires");
                });

            modelBuilder.Entity("Projet.Data.Entities.AdresseParticulier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdressesParticulier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodePostal = "94000",
                            Complement = "",
                            Libelle = "12, rue des Oliviers",
                            Ville = "CRETEIL"
                        },
                        new
                        {
                            Id = 2,
                            CodePostal = "94300",
                            Complement = "Etage 2",
                            Libelle = "10, rue des Olivies",
                            Ville = "VINCENNES"
                        },
                        new
                        {
                            Id = 3,
                            CodePostal = "94120",
                            Complement = "",
                            Libelle = "15, rue de la République",
                            Ville = "FONTENAY SOUS BOIS"
                        },
                        new
                        {
                            Id = 4,
                            CodePostal = "92100",
                            Complement = "",
                            Libelle = "25, rue de la Paix",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 5,
                            CodePostal = "93500",
                            Complement = "",
                            Libelle = "3, aveenue des Parcs",
                            Ville = "ROISSY EN France"
                        },
                        new
                        {
                            Id = 6,
                            CodePostal = "93200",
                            Complement = "",
                            Libelle = "3, rue Lecourbe",
                            Ville = "BAGNOLET"
                        },
                        new
                        {
                            Id = 7,
                            CodePostal = "94120",
                            Complement = "digicode 1432",
                            Libelle = "125, rue LaFayette",
                            Ville = "FONTENAY SOUS BOIS"
                        },
                        new
                        {
                            Id = 8,
                            CodePostal = "93500",
                            Complement = "",
                            Libelle = "36, quai des Orfèvres",
                            Ville = "ROISSY EN FRANCE"
                        },
                        new
                        {
                            Id = 9,
                            CodePostal = "75002",
                            Complement = "Bat. C",
                            Libelle = "32, rue E. Renan",
                            Ville = "PARIS"
                        },
                        new
                        {
                            Id = 10,
                            CodePostal = "92100",
                            Complement = "",
                            Libelle = "23, av P. Valery",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 11,
                            CodePostal = "75003",
                            Complement = "Fond de Cour",
                            Libelle = "15, Place de la Bastille",
                            Ville = "PARIS"
                        });
                });

            modelBuilder.Entity("Projet.Data.Entities.AdresseProfessionel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdressesProfessionnels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodePostal = "94120",
                            Complement = "Digicode 1432",
                            Libelle = "125, rue LaFayette",
                            Ville = "FONTENAY SOUS BOIS"
                        },
                        new
                        {
                            Id = 2,
                            CodePostal = "92060",
                            Complement = "",
                            Libelle = "10, esplanade de la Défense",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 3,
                            CodePostal = "75002",
                            Complement = "Bat. C",
                            Libelle = "32, rue E. Renan",
                            Ville = "Paris"
                        },
                        new
                        {
                            Id = 4,
                            CodePostal = "92060",
                            Complement = "Tour Franklin",
                            Libelle = "24, esplanade de la Défense",
                            Ville = "LA DEFENSE"
                        },
                        new
                        {
                            Id = 5,
                            CodePostal = "75008",
                            Complement = "",
                            Libelle = "10, rue de la Paix",
                            Ville = "PARIS"
                        });
                });

            modelBuilder.Entity("Projet.Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdressePostaleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdressePostaleId");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("Client");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TransactionBancaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompteBancaireId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Devise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumeroCarte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOperation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompteBancaireId");

                    b.ToTable("TransactionsBancaires");
                });

            modelBuilder.Entity("Projet.Data.Entities.ClientParticulier", b =>
                {
                    b.HasBaseType("Projet.Data.Entities.Client");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ClientParticulier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdressePostaleId = 1,
                            Email = "bety@gmail.com",
                            Nom = "BETY",
                            DateNaissance = new DateTime(1985, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Daniel",
                            Sexe = 20
                        },
                        new
                        {
                            Id = 3,
                            AdressePostaleId = 2,
                            Email = "bodin@gmail.com",
                            Nom = "BODIN",
                            DateNaissance = new DateTime(1965, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Justin",
                            Sexe = 20
                        },
                        new
                        {
                            Id = 5,
                            AdressePostaleId = 3,
                            Email = "berris@gmail.com",
                            Nom = "BERRIS",
                            DateNaissance = new DateTime(1977, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Karine",
                            Sexe = 10
                        },
                        new
                        {
                            Id = 7,
                            AdressePostaleId = 4,
                            Email = "abenir@gmail.com",
                            Nom = "ABENIR",
                            DateNaissance = new DateTime(1977, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Alexandra",
                            Sexe = 10
                        },
                        new
                        {
                            Id = 9,
                            AdressePostaleId = 5,
                            Email = "bensaid@gmail.com",
                            Nom = "BENSAID",
                            DateNaissance = new DateTime(1976, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Georgia",
                            Sexe = 10
                        },
                        new
                        {
                            Id = 11,
                            AdressePostaleId = 6,
                            Email = "ababou@gmail.com",
                            Nom = "ABABOU",
                            DateNaissance = new DateTime(1970, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Prenom = "Teddy",
                            Sexe = 20
                        });
                });

            modelBuilder.Entity("Projet.Data.Entities.ClientProfessionnel", b =>
                {
                    b.HasBaseType("Projet.Data.Entities.Client");

                    b.Property<int>("AdresseSiegeId")
                        .HasColumnType("int");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatutJuridique")
                        .HasColumnType("int");

                    b.HasIndex("AdresseSiegeId");

                    b.HasDiscriminator().HasValue("ClientProfessionnel");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AdressePostaleId = 7,
                            Email = "info@axa.com",
                            Nom = "AXA",
                            AdresseSiegeId = 1,
                            Siret = "12548795641122",
                            StatutJuridique = 10
                        },
                        new
                        {
                            Id = 4,
                            AdressePostaleId = 8,
                            Email = "info@paul.com",
                            Nom = "PAUL",
                            AdresseSiegeId = 2,
                            Siret = "87459564455444",
                            StatutJuridique = 40
                        },
                        new
                        {
                            Id = 6,
                            AdressePostaleId = 9,
                            Email = "info@primark.com",
                            Nom = "PRIMARK",
                            AdresseSiegeId = 3,
                            Siret = "08755897458455",
                            StatutJuridique = 10
                        },
                        new
                        {
                            Id = 8,
                            AdressePostaleId = 10,
                            Email = "info@zara.com",
                            Nom = "ZARA",
                            AdresseSiegeId = 4,
                            Siret = "65895874587854",
                            StatutJuridique = 20
                        },
                        new
                        {
                            Id = 10,
                            AdressePostaleId = 11,
                            Email = "info@leonidas.com",
                            Nom = "LEONIDAS",
                            AdresseSiegeId = 5,
                            Siret = "91235987456832",
                            StatutJuridique = 30
                        });
                });

            modelBuilder.Entity("CompteBancaire", b =>
                {
                    b.HasOne("Projet.Data.Entities.Client", "Client")
                        .WithMany("Comptes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Projet.Data.Entities.Client", b =>
                {
                    b.HasOne("Projet.Data.Entities.AdresseParticulier", "AdressePostale")
                        .WithMany()
                        .HasForeignKey("AdressePostaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdressePostale");
                });

            modelBuilder.Entity("TransactionBancaire", b =>
                {
                    b.HasOne("CompteBancaire", "CompteBancaire")
                        .WithMany()
                        .HasForeignKey("CompteBancaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompteBancaire");
                });

            modelBuilder.Entity("Projet.Data.Entities.ClientProfessionnel", b =>
                {
                    b.HasOne("Projet.Data.Entities.AdresseProfessionel", "AdresseSiege")
                        .WithMany()
                        .HasForeignKey("AdresseSiegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdresseSiege");
                });

            modelBuilder.Entity("Projet.Data.Entities.Client", b =>
                {
                    b.Navigation("Comptes");
                });
#pragma warning restore 612, 618
        }
    }
}
